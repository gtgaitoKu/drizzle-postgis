{"version":3,"sources":["../src/functions.ts"],"names":["functions_exports","__export","addMeasure","area","asText","closestPoint","geoHash","geomFromGeoJSON","geomFromText","isValid","isValidReason","x","y","expression","sql","gisExtensionSchema","geom1","geom2","fromDriver","maxChars","measureStart","measureEnd"],"mappings":"kIAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,gBAAAE,EAAA,SAAAC,EAAA,WAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,oBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,kBAAAC,EAAA,MAAAC,EAAA,MAAAC,IAuCO,SAAST,EAAKU,EAAqC,CACxD,OAAOC,IAAMC,CAAkB,WAAWF,CAAU,IAAI,QAAQ,MAAM,CACxE,CASO,SAASR,EACdW,EACAC,EACoB,CACpB,OAAOH,IAAMC,CAAkB,mBAAmBC,CAAK,KAAKC,CAAK,IAAI,QACnEC,CACF,CACF,CASO,SAASV,EACdK,EACuB,CACvB,OAAOC,IAAMC,CAAkB,mBAAmBF,CAAU,IAAI,QAC9DK,CACF,CACF,CASO,SAASd,EAAOS,EAA8C,CACnE,OAAOC,IAAMC,CAAkB,aAAaF,CAAU,GACxD,CAOO,SAASF,EAAEE,EAA4C,CAC5D,OAAOC,IAAMC,CAAkB,QAAQF,CAAU,IAAI,QAAQ,MAAM,CACrE,CAOO,SAASD,EAAEC,EAA4C,CAC5D,OAAOC,IAAMC,CAAkB,QAAQF,CAAU,IAAI,QAAQ,MAAM,CACrE,CAOO,SAASJ,EAAQO,EAAiC,CACvD,OAAOF,IAAMC,CAAkB,cAAcC,CAAK,MAAM,QAAQ,OAAO,CACzE,CAOO,SAASN,EAAcM,EAAgC,CAC5D,OAAOF,IAAMC,CAAkB,oBAAoBC,CAAK,GAC1D,CASO,SAAST,EACdM,EACuB,CACvB,OAAOC,IAAMC,CAAkB,sBAAsB,KAAK,UACxDF,CACF,CAAC,IAAI,QAAQK,CAAU,CACzB,CAUO,SAASZ,EAAQU,EAAmBG,EAAW,GAAiB,CACrE,OAAOL,IAAMC,CAAkB,cAAcC,CAAK,KAAKG,CAAQ,GACjE,CAWO,SAASjB,EACdc,EACAI,EACAC,EACa,CACb,OAAOP,IAAMC,CAAkB,iBAAiBC,CAAK,KAAKI,CAAY,KAAKC,CAAU,GACvF","sourcesContent":["/**\n * @packageDocumentation\n *\n *  @groupDescription Measurement Functions\n * These functions compute measurements of distance, area and angles.\n * There are also functions to compute geometry values determined by measurements.\n * {@link https://postgis.net/docs/reference.html#Measurement_Functions}\n *\n * @groupDescription Geometry Inputs\n * These functions create geometry objects from various textual or binary formats.\n * {@link https://postgis.net/docs/reference.html#Geometry_Inputs}\n *\n * @groupDescription Geometry Outputs\n * These functions convert geometry objects into various textual or binary formats.\n * {@link https://postgis.net/docs/reference.html#Geometry_Inputs}\n *\n * @groupDescription Geometry Validation\n * These functions test whether geometries are valid according to the OGC SFS standard.\n * They also provide information about the nature and location of invalidity.\n * {@link https://postgis.net/docs/reference.html#Geometry_Validation}\n *\n * @groupDescription Geometry Accessors\n * These functions return information about properties of specific geometry objects.\n * {@link https://postgis.net/docs/reference.html#Geometry_Accessors}\n */\n\nimport { fromDriver } from \"~/models\";\nimport { type SQL, sql, type SQLWrapper } from \"drizzle-orm\";\nimport { gisExtensionSchema } from \"~/config\";\nimport type * as GeoJSON from \"~/geojsonTypes\";\n\n/** Returns the area of a polygonal geometry.\n *\n * For geometry types a 2D Cartesian (planar) area is computed, with units specified by the SRID.\n * For geography types by default area is determined on a spheroid with units in square meters.\n *\n * @group Measurement Functions\n * @link https://postgis.net/docs/ST_Area.html\n */\nexport function area(expression: SQLWrapper): SQL<number> {\n  return sql`${gisExtensionSchema}ST_Area(${expression})`.mapWith(Number);\n}\n\n/** Returns the 2-dimensional point on geom1 that is closest to geom2.\n *\n * This is the first point of the shortest line between the geometries (as computed by ST_ShortestLine).\n *\n * @group Measurement Functions\n * @link https://postgis.net/docs/ST_ClosestPoint.html\n */\nexport function closestPoint(\n  geom1: SQLWrapper,\n  geom2: SQLWrapper\n): SQL<GeoJSON.Point> {\n  return sql`${gisExtensionSchema}ST_ClosestPoint(${geom1}, ${geom2})`.mapWith(\n    fromDriver<GeoJSON.Point>\n  );\n}\n\n/** Constructs a PostGIS ST_Geometry object from the OGC Well-Known text representation.\n *\n * Inverse of {@link asText}\n *\n * @group Geometry Inputs\n * @link https://postgis.net/docs/ST_GeomFromText.html\n */\nexport function geomFromText(\n  expression: string | SQLWrapper\n): SQL<GeoJSON.Geometry> {\n  return sql`${gisExtensionSchema}ST_GeomFromText(${expression})`.mapWith(\n    fromDriver\n  );\n}\n\n/** Returns the OGC Well-Known Text (WKT) representation of the geometry/geography.\n *\n * Inverse of {@link geomFromText}\n *\n * @group Geometry Outputs\n * @link https://postgis.net/docs/ST_AsText.html\n */\nexport function asText(expression: string | SQLWrapper): SQL<string> {\n  return sql`${gisExtensionSchema}ST_AsText(${expression})`;\n}\n\n/** Return the X coordinate of the point, or NULL if not available. Input must be a point.\n *\n * @group Geometry Accessors\n * @link https://postgis.net/docs/ST_X.html\n */\nexport function x(expression: SQLWrapper): SQL<number | null> {\n  return sql`${gisExtensionSchema}ST_X(${expression})`.mapWith(Number);\n}\n\n/** Return the Y coordinate of the point, or NULL if not available. Input must be a point.\n *\n * @group Geometry Accessors\n * @link https://postgis.net/docs/ST_Y.html\n */\nexport function y(expression: SQLWrapper): SQL<number | null> {\n  return sql`${gisExtensionSchema}ST_Y(${expression})`.mapWith(Number);\n}\n\n/** Tests if an ST_Geometry value is well-formed and valid in 2D according to the OGC rules.\n *\n * @group Geometry Validation\n * @link https://postgis.net/docs/ST_IsValid.html\n */\nexport function isValid(geom1: SQLWrapper): SQL<boolean> {\n  return sql`${gisExtensionSchema}ST_IsValid(${geom1},0)`.mapWith(Boolean);\n}\n\n/** Returns text stating if a geometry is valid, or if invalid a reason why.\n *\n * @group Geometry Validation\n * @link https://postgis.net/docs/ST_IsValidReason.html\n */\nexport function isValidReason(geom1: SQLWrapper): SQL<string> {\n  return sql`${gisExtensionSchema}ST_IsValidReason(${geom1})`;\n}\n\n/** Constructs a PostGIS geometry object from the GeoJSON representation.\n *\n * ST_GeomFromGeoJSON works only for JSON Geometry fragments. It throws an error if you try to use it on a whole JSON document.\n *\n * @group Geometry Inputs\n * @link https://postgis.net/docs/ST_GeomFromGeoJSON.html\n */\nexport function geomFromGeoJSON(\n  expression: Record<string, unknown>\n): SQL<GeoJSON.Geometry> {\n  return sql`${gisExtensionSchema}ST_GeomFromGeoJSON(${JSON.stringify(\n    expression\n  )})`.mapWith(fromDriver);\n}\n\n/** Computes a GeoHash representation of a geometry.\n *\n * A GeoHash encodes a geographic Point into a text form that is sortable and searchable based on prefixing.\n * A shorter GeoHash is a less precise representation of a point. It can be thought of as a box that contains the point.\n *\n * @group Geometry Outputs\n * @link https://postgis.net/docs/ST_GeoHash.html\n */\nexport function geoHash(geom1: SQLWrapper, maxChars = 20): SQL<string> {\n  return sql`${gisExtensionSchema}ST_GeoHash(${geom1}, ${maxChars})`;\n}\n\n/** Return a derived geometry with measure elements linearly interpolated between the start and end points.\n *\n * If the geometry has no measure dimension, one is added.\n * If the geometry has a measure dimension, it is over-written with new values.\n * Only LINESTRINGS and MULTILINESTRINGS are supported..\n *\n * @group Linear Referencing\n * @link https://postgis.net/docs/manual-2.0/ST_AddMeasure.html\n */\nexport function addMeasure(\n  geom1: SQLWrapper,\n  measureStart: number,\n  measureEnd: number\n): SQL<string> {\n  return sql`${gisExtensionSchema}ST_AddMeasure(${geom1}, ${measureStart}, ${measureEnd})`;\n}\n"]}