import { a as a$1, e, b as b$1, f, k } from './chunk-PUN3HLEN.mjs';
import O from 'wkx';

var P={};a$1(P,{box2D:()=>d,box2DfromDriver:()=>g,fromDriver:()=>n,geometry:()=>D,geometryCollection:()=>J,lineString:()=>x,multiLineString:()=>v,multiPoint:()=>b,multiPolygon:()=>h,point:()=>N,polygon:()=>T});function a(e,t){return {name:typeof e=="string"&&e.length>0?e:"",config:typeof e=="object"?e:t}}var p=class extends e{static[b$1]="PgCustomColumnBuilder";constructor(t,r,m){super(t,"custom","PgCustomColumn"),this.config.fieldConfig=r,this.config.customTypeParams=m;}build(t){return new y(t,this.config)}},y=class extends f{static[b$1]="PgCustomColumn";sqlName;mapTo;mapFrom;constructor(t,r){super(t,r),this.sqlName=r.customTypeParams.dataType(r.fieldConfig),this.mapTo=r.customTypeParams.toDriver,this.mapFrom=r.customTypeParams.fromDriver;}getSQLType(){return this.sqlName}mapFromDriverValue(t){return typeof this.mapFrom=="function"?this.mapFrom(t):t}mapToDriverValue(t){return typeof this.mapTo=="function"?this.mapTo(t):t}};function o(e){return (t,r)=>{let{name:m,config:S}=a(t,r);return new p(m,S,e)}}var i=e=>{let t="geometry";return e?.type?(t+=`(${e.type}`,e?.srid&&(t+=`,${e.srid}`),`${t})`):`${t}(Geometry)`};function s(e){return k`ST_GeomFromGeoJSON(${JSON.stringify(e)})`}function n(e){let t=Buffer.from(e,"hex");return O.Geometry.parse(t).toGeoJSON({shortCrs:!0})}function g(e){let t=e.match(/BOX\((?<xmin>[0-9\.]+),? ?(?<ymin>[0-9\.]+),? ?(?<xmax>[0-9\.]+),? ?(?<ymax>[0-9\.]+)\)/);if(!t?.groups)throw new Error(`Box2D parse error, value: ${e}`);return [Number.parseFloat(t.groups.xmin),Number.parseFloat(t.groups.ymin),Number.parseFloat(t.groups.xmax),Number.parseFloat(t.groups.ymax)]}var d=o({dataType:()=>"box2d",toDriver:e=>`BOX(${e[0]} ${e[1]}, ${e[2]} ${e[3]})`,fromDriver:g}),D=o({dataType:i,toDriver:e=>s(e),fromDriver:e=>n(e)}),N=o({dataType:e=>i({type:`Point${e?.is3D?"Z":""}`,...e}),toDriver:e=>s(e),fromDriver:e=>n(e)}),b=o({dataType:e=>i({type:`MultiPoint${e?.is3D?"Z":""}`,...e}),toDriver:e=>s(e),fromDriver:e=>n(e)}),x=o({dataType:e=>i({type:`LineString${e?.is3D?"Z":""}`,...e}),toDriver:e=>s(e),fromDriver:e=>n(e)}),v=o({dataType:e=>i({type:`MultiLineString${e?.is3D?"Z":""}`,...e}),toDriver:e=>s(e),fromDriver:e=>n(e)}),T=o({dataType:e=>i({type:`Polygon${e?.is3D?"Z":""}`,...e}),toDriver:e=>s(e),fromDriver:e=>n(e)}),h=o({dataType:e=>i({type:`MultiPolygon${e?.is3D?"Z":""}`,...e}),toDriver:e=>s(e),fromDriver:e=>n(e)}),J=o({dataType:e=>i({type:"GeometryCollection",...e}),toDriver:e=>s(e),fromDriver:e=>n(e)});

export { n as a, g as b, d as c, D as d, N as e, b as f, x as g, v as h, T as i, h as j, J as k, P as l };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=chunk-5XWWYWUB.mjs.map